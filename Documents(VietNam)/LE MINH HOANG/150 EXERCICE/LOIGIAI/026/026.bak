program MaxPath;
const
  InputFile  = 'MAX.INP';
  OutputFile = 'MAX.OUT';
  max = 100;
var
  a, b, Trace: array[1..max, 1..max] of Integer;
  m, n: Integer;

procedure Enter;
var
  f: Text;
  i, j: Integer;
begin
  Assign(f, InputFile); Reset(f);
  Readln(f, m, n);
  for i := 1 to m do
    begin
      for j := 1 to n do Read(f, a[i, j]);
      Readln(f);
    end;
  Close(f);
end;

procedure Optimize;
var
  i, j: Integer;
  d: ShortInt;
begin
  for i := 1 to m do b[i, n] := a[i, n];
  for j := n - 1 downto 1 do
    for i := 1 to m do
      begin
        b[i, j] := -MaxInt;
        for d := -1 to 1 do
          if (i + d >= 1) and (i + d <= m) and
                (b[i + d, j + 1] + a[i, j] > b[i, j]) then
            begin
              b[i, j] := b[i + d, j + 1] + a[i, j];
              Trace[i, j] := d;
            end;
      end;
end;

procedure PrintResult;
var
  i, k: Integer;
  f: Text;
begin
  Assign(f, OutputFile); Rewrite(f);
  i := 1;
  for k := 2 to m do
    if b[k, 1] > b[i, 1] then i := k;
  Writeln(f, b[i, 1]);
  Writeln(f, i);
  for k := 2 to n do
    begin
      i := i + Trace[i, k - 1];
      Writeln(f, i);
    end;
  Close(f);
end;

begin
  Enter;
  Optimize;
  PrintResult;
end.
