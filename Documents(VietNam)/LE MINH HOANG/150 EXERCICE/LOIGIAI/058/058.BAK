{$A+,B-,D+,E+,F-,G-,I+,L+,N+,O-,P-,Q-,R-,S+,T-,V+,X+,Y+}
{$M 16384,0,655360}

program Ngoac;
const
  InputFile  = 'NGOAC.INP';
  OutputFile = 'NGOAC.OUT';
  maxn = 64;
  maxk = 32;
  maxCount = 50000;
var
  X: string[maxn];
  T, C: array[0..maxn] of Integer;       {Day danh gia nhanh can}
  F, G: array[0..maxn, 0..maxk] of Comp; {Bang phuong an quy hoach dong}
  n, k, Count: Integer;
  Result: Comp;
  fout: Text;
  Start: LongInt;
  Time: LongInt absolute 0:$46C;

procedure Enter;
var
  f: Text;
begin
  Assign(f, InputFile); Reset(f);
  Readln(f, n, k);
  Close(f);
end;

procedure Init;
begin
  FillChar(F, SizeOf(F), 0);
  FillChar(G, SizeOf(G), 0);
  F[0, 0] := 1;
  G[0, 0] := 1;
  T[0] := 0;
  C[0] := 0;
  X[0] := Chr(n);
  Assign(fout, OutputFile); Rewrite(fout);
end;

procedure Destroy;
begin
  Close(fout);
end;

procedure Optimize;
var
  i, j, t: Integer;
begin
  t := k - 1;
  for i := 1 to n do
    for j := 0 to k do
      begin
        if j > 0 then
          begin
            F[i, j] := F[i - 1, j - 1];
            G[i, j] := G[i - 1, j - 1];
          end;
        if j < k then F[i, j] := F[i, j] + F[i - 1, j + 1];
        if j < t then G[i, j] := G[i, j] + G[i - 1, j + 1];
      end;
end;

procedure Try(i: Byte);
begin
  if (T[i - 1] < k) and (T[i - 1] + 1 <= n - i) then {Mo ngoac}
    begin
      X[i] := '(';
      T[i] := T[i - 1] + 1;
      if C[i - 1] < T[i] then C[i] := T[i]
      else C[i] := C[i - 1];
      Try(i + 1);
      if Count = 0 then Exit;
    end;
  if (T[i - 1] > 0) and
        ((C[i - 1] = k) or (k + k - T[i - 1] + 1 + i <= n))
          then {Dong ngoac}
    begin
      X[i] := ')';
      T[i] := T[i - 1] - 1;
      C[i] := C[i - 1];
      if (i = n) then
        begin
          Writeln(fout, X);
          Dec(Count);
        end
      else
        begin
          Try(i + 1);
          if Count = 0 then Exit;
        end;
    end;
end;

procedure Solve;
begin
  Init;
  Optimize;
  Result := F[n, 0] - G[n, 0];
  Writeln(fout, Result:0:0);
  if Result > maxCount then Count := maxCount
  else Count := Trunc(Result);
  Try(1);
  Destroy;
end;

begin
  Enter;
  Start := Time;
  Solve;
  Writeln('Time = ', (Time - Start) / 18.2:1:2, ' (s)');
end.
