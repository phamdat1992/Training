{$N+,E+}
program Schedule;  {HeapSort by Index}
const
  InputFile  = 'SCHEDULE.INP';
  OutputFile = 'SCHEDULE.OUT';
  max = 10000;
var
  a, b, Index: array[1..max] of Integer;
  n: Integer;
  Res: Comp;

procedure Enter;
var
  f: Text;
  i: Integer;
begin
  Assign(f, InputFile); Reset(f);
  Readln(f, n);
  for i := 1 to n do Read(f, a[i]);
  Readln(f);
  for i := 1 to n do Read(f, b[i]);
  Close(f);
end;

procedure Init;
var
  i: Integer;
begin
  for i := 1 to n do Index[i] := i;
end;

function Lower(i, j: Integer): Boolean; {= a[i]/b[i] > a[j]/b[j]}
begin
  Lower := LongInt(a[i]) * b[j] > LongInt(a[j]) * b[i];
end;

procedure Adjust(root, EndNode: Integer);
var
  i, c: Integer;
  Key: Integer;
begin
  Key := Index[root];
  while root shl 1 <= EndNode do
    begin
      c := root shl 1;
      if (c < EndNode) and Lower(Index[c], Index[c + 1]) then Inc(c);
      if  Lower(Index[c], Key) then Break;
      Index[root] := Index[c]; root := c;
    end;
  Index[root] := Key;
end;

procedure HeapSort;
var
  i, t: Integer;
begin
  for i := n shr 1 downto 1 do Adjust(i, n);
  for i := n - 1 downto 1 do
    begin
      t := Index[1]; Index[1] := Index[i + 1]; Index[i + 1] := t;
      Adjust(1, i);
    end;
end;

procedure Solve;
var
  t: LongInt;
  i, j: Integer;
begin
  t := 0; Res := 0;
  for i := 1 to n do
    begin
      j := Index[i];
      t := t + b[j];
      Res := Res + a[j] * (t + 0.0);
    end;
end;

procedure Result;
var
  f: Text;
  i: Integer;
begin
  Assign(f, OutputFile); Rewrite(f);
  Writeln(f, Res:0:0);
  for i := 1 to n do  Write(f, Index[i], ' ');
  Close(f);
end;

begin
  Enter;
  Init;
  HeapSort;
  Solve;
  Result;
end.
2
1 1
1 2
