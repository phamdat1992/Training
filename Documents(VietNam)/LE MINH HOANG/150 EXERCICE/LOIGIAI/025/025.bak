{$N+,E+}
program DigitSum;
const
  maxn = 20;
  maxk = 30;
  InputFile  = 'DIGITSUM.INP';
  OutputFile = 'DIGITSUM.OUT';
type
  TDigit = 0..9;
var
  n, k: Integer;
  p: Comp;
  B: array[0..maxn, 0..maxk] of Comp;
  X: array[1..maxn] of TDigit;

procedure Enter;
var
  f: Text;
begin
  Assign(f, InputFile); Reset(f);
  Readln(f, n, k, p);
  Close(f);
end;

procedure Init;
begin
  B[0, 0] := 1;
  FillChar(B[0, 1], k * SizeOf(B[0, 1]), 0);
end;

procedure Optimize;
var
  i, j: Integer;
  d: TDigit;
begin
  for i := 1 to n do
    for j := 0 to k do
      begin
        B[i, j] := 0;
        for d := 0 to 9 do
          if d <= j then B[i, j] := B[i, j] + B[i - 1, j - d]
          else Break;
      end;
end;

function FindFirst(n, k: Integer; Post: Comp): TDigit;
var
  d: TDigit;
  S: Comp;
begin
  S := 0;
  for d := 0 to 9 do
    if d <= k then
      begin
        S := S + B[n - 1, k - d];
        if S >= Post then Break;
      end;
  FindFirst := d;
end;

procedure Trace;
var
  i, j: Integer;
  Pn, Pk: Integer;
  PPost: Comp;
begin
  Pn := n; Pk := k; PPost := p;
  for i := 1 to n do
    begin
      X[i] := FindFirst(Pn, Pk, PPost);
      if X[i] > 0 then
        for j := 0 to X[i] - 1 do
          PPost := PPost - B[Pn - 1, Pk - j];
      Dec(Pn);
      Pk := Pk - X[i];
    end;
end;

procedure Result;
var
  f: Text;
  i: Integer;
begin
  Assign(f, OutputFile); Rewrite(f);
  Writeln(f, B[n, k]:0:0);
  i := 1;
  while X[i] = 0 do Inc(i);
  while i <= n do
    begin
      Write(f, X[i]);
      Inc(i);
    end;
  Close(f);
end;

begin
  Enter;
  Init;
  Optimize;
  Trace;
  Result;
end.
20 30 1000000000
